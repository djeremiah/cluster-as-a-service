apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    spaces.upbound.io/cluster-type: eks
  name: eks.xspaces.example.upbound.io
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: example.upbound.io/v1alpha1
    kind: XSpace
  mode: Pipeline
  pipeline:
  - step: patch-and-transform
    functionRef:
      name: upbound-function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      environment: null
      kind: Resources
      patchSets: 
      - name: target-cluster
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.clusterId
          toFieldPath: spec.providerConfigRef.name
      resources:
      - name: cert-manager
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata:
            annotations:
              crossplane.io/external-name: cert-manager
            labels:
              platform.upbound.io/deletion-ordering: enabled
          spec:
            forProvider:
              namespace: cert-manager
              chart:
                name: cert-manager
                repository: https://charts.jetstack.io
                version: v1.13.1
              values:
                installCRDs: true
        patches:
        - type: PatchSet
          patchSetName: target-cluster
      - name: ingress-nginx
        base: 
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata:
            annotations:
              crossplane.io/external-name: ingress-nginx
            labels:
              platform.upbound.io/deletion-ordering: enabled
          spec:
            forProvider:
              namespace: ingress-nginx
              chart:
                name: ingress-nginx
                repository: https://kubernetes.github.io/ingress-nginx
                version: "4.9.1"
              values:
                controller:
                  allowSnippetAnnotations: true
                  service:
                    type: LoadBalancer
                    annotations:
                      service.beta.kubernetes.io/aws-load-balancer-type: external
                      service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
                      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
                      service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: http
                      service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /healthz
                      service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "10254"
        patches:
        - type: PatchSet
          patchSetName: target-cluster
      - name: universal-crossplane
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata:
            annotations:
              crossplane.io/external-name: universal-crossplane
            labels:
              platform.upbound.io/deletion-ordering: enabled
          spec:
            forProvider:
              namespace: upbound-system
              chart:
                name: universal-crossplane
                repository: https://charts.upbound.io/stable
                version: 1.14.5-up.1
            rollbackLimit: 5
        patches:
        - type: PatchSet
          patchSetName: target-cluster
      - name: provider-kubernetes
        base:
          apiVersion: example.upbound.io/v1alpha1
          kind: XProvider
          spec:
            parameters:
              providerName: provider-kubernetes
              providerPkg: "xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v0.11.4"
        patches:
        - type: PatchSet
          patchSetName: target-cluster
      - name: provider-kubernetes-providerconfig
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          spec:
            forProvider:
              manifest:
                apiVersion: kubernetes.crossplane.io/v1alpha1
                kind: ProviderConfig
                metadata:
                  name: upbound-cluster
                spec:
                  credentials:
                      source: InjectedIdentity
        patches:
        - type: PatchSet
          patchSetName: target-cluster
      - name: provider-helm
        base:
          apiVersion: example.upbound.io/v1alpha1
          kind: XProvider
          spec:
            parameters:
              providerName: provider-helm
              providerPkg: "xpkg.upbound.io/crossplane-contrib/provider-helm:v0.16.0"
        patches:
        - type: PatchSet
          patchSetName: target-cluster
      - name: provider-helm-providerconfig
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          spec:
            forProvider:
              manifest:
                apiVersion: helm.crossplane.io/v1beta1
                kind: ProviderConfig
                metadata:
                  name: upbound-cluster
                spec:
                  credentials:
                      source: InjectedIdentity
        patches:
        - type: PatchSet
          patchSetName: target-cluster
      - name: upbound-pull-secret 
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          spec: 
            forProvider:
              manifest:
                apiVersion: v1
                kind: Secret
                type: kubernetes.io/dockerconfigjson
                metadata:
                  name: upbound-pull-secret
                  namespace: upbound-system
            references:
            - patchesFrom: 
                apiVersion: v1
                kind: Secret
                fieldPath: data[.dockerconfigjson]
              toFieldPath: data[.dockerconfigjson]
        patches:
        - fromFieldPath: spec.parameters.spacesPullSecretRef.name
          toFieldPath: spec.references[0].patchesFrom.name
        - fromFieldPath: spec.parameters.spacesPullSecretRef.namespace
          toFieldPath: spec.references[0].patchesFrom.namespace
        - type: PatchSet
          patchSetName: target-cluster
      - name: spaces
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata: 
            annotations:
              crossplane.io/external-name: spaces
            labels:
              platform.upbound.io/deletion-ordering: enabled
          spec:
            forProvider:
              namespace: upbound-system
              chart:
                name: spaces
                repository: oci://us-west1-docker.pkg.dev/orchestration-build/upbound-environments
              values:
                clusterType: eks
              set:
              - name: "ingress.host"
                value: "replace"
              - name: "features.alpha.argocdPlugin.enabled"
                value: "true"
              - name: "features.alpha.argocdPlugin.target.namespace"
                value: "argocd"
            rollbackLimit: 5
        patches:
        - fromFieldPath: spec.parameters.helmCredentialsSecretRef
          toFieldPath: spec.forProvider.chart.pullSecretRef
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.chart.version
        - fromFieldPath: spec.parameters.account
          toFieldPath: spec.forProvider.values.account
        - fromFieldPath: spec.parameters.host
          toFieldPath: spec.forProvider.set[0].value
          transforms:
          - type: string
            string:
              type: Format
              fmt: "proxy.%s"
        - type: PatchSet
          patchSetName: target-cluster
      - name: argocd
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata: 
            annotations:
              crossplane.io/external-name: argo-cd
            labels:
              platform.upbound.io/deletion-ordering: enabled
          spec:
            forProvider:
              chart:
                name: argo-cd
                repository: https://argoproj.github.io/argo-helm
              namespace: argocd
              values:
                applicationSet:
                  metrics:
                    enabled: true
                    service:
                      annotations:
                        prometheus.io/scrape: true
                  replicaCount: 1
                configs:
                  cm:
                    application.resourceTrackingMethod: annotation
                    resource.customizations: |
                      "*.upbound.io/*":
                        health.lua: |
                          health_status = {
                            status = "Progressing",
                            message = "Provisioning ..."
                          }

                          if obj.status == nil or obj.status.conditions == nil then
                            return health_status
                          end

                          for i, condition in ipairs(obj.status.conditions) do
                            if condition.type == "LastAsyncOperation" then
                              if condition.status == "False" then
                                health_status.status = "Degraded"
                                health_status.message = condition.message
                                return health_status
                              end
                            end

                            if condition.type == "Synced" then
                              if condition.status == "False" then
                                health_status.status = "Degraded"
                                health_status.message = condition.message
                                return health_status
                              end
                            end

                            if condition.type == "Ready" then
                              if condition.status == "True" then
                                health_status.status = "Healthy"
                                health_status.message = "Resource is up-to-date."
                                return health_status
                              end
                            end
                          end

                          return health_status

                      "*.crossplane.io/*":
                        health.lua: |
                          health_status = {
                            status = "Progressing",
                            message = "Provisioning ..."
                          }

                          if obj.status == nil or obj.status.conditions == nil then
                            return health_status
                          end

                          for i, condition in ipairs(obj.status.conditions) do
                            if condition.type == "LastAsyncOperation" then
                              if condition.status == "False" then
                                health_status.status = "Degraded"
                                health_status.message = condition.message
                                return health_status
                              end
                            end

                            if condition.type == "Synced" then
                              if condition.status == "False" then
                                health_status.status = "Degraded"
                                health_status.message = condition.message
                                return health_status
                              end
                            end

                            if condition.type == "Ready" then
                              if condition.status == "True" then
                                health_status.status = "Healthy"
                                health_status.message = "Resource is up-to-date."
                                return health_status
                              end
                            end
                          end

                          return health_status
                    resource.exclusions: |
                      - kinds:
                        - ProviderConfigUsage
                        apiGroups:
                        - "*"
                controller:
                  env:
                    - name: ARGOCD_K8S_CLIENT_QPS
                      value: "300"
                  metrics:
                    enabled: true
                    service:
                      annotations:
                        prometheus.io/scrape: true
                  replicas: 1
                redis-ha:
                  enabled: true
                repoServer:
                  autoscaling:
                    enabled: true
                    minReplicas: 1
                  metrics:
                    enabled: true
                    service:
                      annotations:
                        prometheus.io/scrape: true
                  resources:
                    limits:
                      cpu: 200m
                      memory: 512Mi
                    requests:
                      cpu: 100m
                      memory: 256Mi
                server:
                  autoscaling:
                    enabled: true
                    minReplicas: 1
                  metrics:
                    enabled: true
                    service:
                      annotations:
                        prometheus.io/scrape: true
                  resources:
                    limits:
                      cpu: 200m
                      memory: 512Mi
                    requests:
                      cpu: 100m
                      memory: 256Mi
                  ingress:
                    enabled: true
                    ingressClassName: nginx
                    annotations:
                      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
                      cert-manager.io/cluster-issuer: spaces-selfsigned
                    hosts:
                    - hostname # patched
                    tls:
                    - hosts:
                      - hostname # patched
                      secretName: argocd-tls
                  ingressGrpc:
                    enabled: true
                    ingressClassName: nginx
                    annotations:
                      nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
                      cert-manager.io/cluster-issuer: spaces-selfsigned
                    hosts:
                    - grpc.hostname # patched
                    tls:
                    - hosts:
                      - grpc.hostname # patched
                      secretName: argocd-grpc-tls
        patches:
        - type: PatchSet
          patchSetName: target-cluster
        - fromFieldPath: spec.parameters.host
          toFieldPath: spec.forProvider.values.server.ingress.hosts[0]
          transforms:
          - type: string
            string:
              type: Format
              fmt: "argocd.%s"
        - fromFieldPath: spec.parameters.host
          toFieldPath: spec.forProvider.values.server.ingress.tls[0].hosts[0]
          transforms:
          - type: string
            string:
              type: Format
              fmt: "argocd.%s"
        - fromFieldPath: spec.parameters.host
          toFieldPath: spec.forProvider.values.server.ingressGrpc.hosts[0]
          transforms:
          - type: string
            string:
              type: Format
              fmt: "grpc.argocd.%s"
        - fromFieldPath: spec.parameters.argocd.host
          toFieldPath: spec.forProvider.values.server.ingressGrpc.tls[0].hosts[0]
          transforms:
          - type: string
            string:
              type: Format
              fmt: "grpc.argocd.%s"
        
          
  
